{"version":3,"sources":["tree/msNgTree.js","tree/msNgTree2.js","treeGrid/msNgTreeGrid.js"],"names":[],"mappings":"YAAA,qBAEQ,OAAA,8DAQI,2BACJ,gBAAA,WACA,QAAA,IAAA,gBACJ,IAAA,GACA,iCAEA,GACY,EAAM,YAAA,YAEd,EAAA,EACI,EAAA,SAAA,aAEA,cAEA,UAAA,iCAGI,2BAGA,4EACA,cACA,WACA,YAEA,KAAA,WACJ,WAAA,IACJ,SAAA,IACJ,SAAA,IACS,cAAkB,IACvB,eAAA,IACI,UAAA,IACA,YAAA,IACA,UAAA,uBAEA,SAAA,+CAII,WAAA,gBAAA,SAAA,EAAA,mBAEA,aACA,cACA,0BAEA,SAAA,EAAA,EAAA,GACA,GAAA,KAEA,GAAA,WAAA,EAAA,YAAA,WACI,SAAA,EAAA,UAAA,SACA,SAAA,EAAA,0BACI,EAAA,QAAA,2BACA,EAAA,QAAA,0BACA,EAAA,QAAA,4BACA,EAAA,QAAA,cACJ,UAAA,EAAA,QAAA,YACA,UAAA,KAcJ,EAAA,GAAA,QAAA,SAAA,qBAEA,gCAIQ,GAAA,EAAA,KAAA,UACA,OAAA,iEAiBR,QAAA,QAAA,EAAA,MAAA,SAAA,GACI,EAAA,MAAA,EAAA,KACJ,EAAA,OAZQ,UAAA,EAAA,WACI,MAAA,EAAA,mBACA,IAAA,eAAA,EAAA,EAAA,EAAA,EAAA,WACJ,QAAA,UAAA,EAAA,EAAA,8BAcJ,EAAA,MAGA,SAAA,SAAA,GACJ,MAAA,GAAA,MAAA,EAAA,cAEI,OAAA,SAAA,GACJ,MAAA,GAAA,MAAA,EAAA,YAEI,WAAA,WACJ,MAAA,GAAA,YAEI,YAAA,SAAA,GACJ,MAAA,GAAA,OAAA,EAAA,MAAA,OAAA,gCAGI,MAAA,SAAA,UAAA,EAAA,gBAEJ,EAAA,iBAAA,WACI,MAAA,SAAA,UAAA,EAAA,iBAEJ,EAAA,YAAA,WACI,MAAA,SAAA,UAAA,EAAA,0CAIJ,MAAA,GAAA,mCAEQ,WACJ,MAAA,GAAA,gBAEJ,EAAA,aAAA,wCAKQ,SAAA,GACJ,MAAA,GAAA,OAAA,GAAA,EAAA,MAAA,WAGI,KAGA,MAAA,EAAA,KAAA,OAAA,EAAA,KAAA,MAAA,OAAA,EAAA,CACJ,GAAA,GAAA,EACA,SAAA,UAAA,EAAA,mDAIA,QAAA,UAAA,EAAA,yDAGA,QAAA,UAAA,EAAA,YACA,GAAA,oBAAA,EAAA,SAAA,KAEI,QAAA,UAAA,EAAA,iBAEJ,GAAA,yBAAA,EAAA,cAAA,KAEI,QAAA,UAAA,EAAA,kBAEJ,GAAA,0BAAA,EAAA,eAAA,KAEI,QAAA,UAAA,EAAA,yFAMR,GAAA,uBAAA,EAAA,YAAA,KAER,QAAA,UAAA,EAAA,qDCrLQ,IAAK,GAAA,EAAA,qCAAA,EAAA,oBAAA,EAEb,GAAA,OAAA,wBAOI,8BACA,QAAA,2BAEA,cACA,WACA,IACJ,OACA,KAAA,WACI,WAAA,iBAEA,SAAA,IACA,OAAA,8BAEA,YAAA,cACI,mBACA,KAER,KAAA,SAAA,EAAA,EAAA,mGC1BJ,QAAA,QAAA,EAAA,KAAA,SAAA,GACJ,EAAA,OAAA,IACA,QAAA,IAAA,OAAA,oEAWgB,2BAIA,WAEJ,KAAA,wBAEI,SAAA,WAAA,SAAA,WAAA,iBAAA,SAAA,EAAA,EAAA,EAAA,mBAEA,KAAA,OAAA,EACA,KAAA,SAAA,EACA,KAAA,OAAA,WACA,QAAA,6CAII,SAAA,EAAA,GACJ,QAAA,IAAA,WAAA,EAAA,MAGI,GAAA,EAAA,KAAA,QACJ,IAEJ,QAAA,QAAA,EAAA,WAAA,sBAKQ,QAAA,EAAA,WAAA,SAAA,GACA,EAAA,QAAA,QAAA,gCAOJ,IAAA,aAGE,KAAA,SAAU,EAAA,EAAA,EAAA,GACpB,QAAA,IAAA,OAAA,EAAA","file":"msngui.min.js","sourcesContent":["angular.module('ms.NgUi.tree',[])\n    .service('msTreeService',function() {\n        console.log('msTreeService');\n        var selectedElement;\n        var msTreeService={};\n        msTreeService.select = function(element) {\n            if (selectedElement) {\n                selectedElement.removeClass('selected');\n            }\n            selectedElement=element;\n            selectedElement.addClass('selected');\n        }\n        return msTreeService;\n    })\n    .directive('msTree1', function() {\n\n    })\n    .directive('msTree', function() {\n\n        return {\n            template: '<tree-node-element ng-repeat=\"node in tree\"></tree-node-element>',\n            replace: true,\n            transclude: true,\n            restrict: 'EA',\n            scope: {\n                tree: '=ngModel',\n                folderType:\"=\",\n                fileType:\"=\",\n                hovering: \"=\",//branch, leaf\n                classExpanded:  \"@\",\n                classCollapsed:  \"@\",\n                classFile: \"@\",\n                classParent: \"@\",\n                classLeaf: \"@\",\n                select : \"&onSelect\",\n                children : \"=\"\n            }\n        };\n    }).factory(\n).directive('treeNodeElement', function($compile, msTreeService) {\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'tree/tree.tpl.html',\n\n            link: function(scope, elm, attrs, controller) {\n                var options = {};\n\n                options.folderType = attrs.folderType || \"folder\" ;\n                options.fileType = attrs.fileType || \"file\" ;\n                options.onSelect=attrs.onSelect;\n                scope.classCollapsed=scope.$parent.classCollapsed;\n                scope.classFile=scope.$parent.classFile;\n                scope.classExpanded=scope.$parent.classExpanded;\n                scope.classParent=scope.$parent.classParent;\n                scope.classLeaf=scope.$parent.classLeaf;\n                scope.expanded = true;\n                var parentEl=\"\";\n                function deselectTree(elm) {\n                    var parent = elm.parent();\n                    if (parent[0].tagName==\"UL\" || parent[0].tagName==\"LI\") {\n                        parent.children('span').removeClass('selected');\n                        console.log(parent.children('span'));\n                        parentEl=parent;\n                        deselectTree(parent);\n                    }\n                    else {\n                    }\n\n                }\n                elm.on('click', function(e) {\n                    var children = elm.find('li');\n                    if (children) {\n                        children.toggleClass('ng-hide');\n                    }\n                    //var el=deselectTree(elm);\n                    var elemLeaf=elm.find('span');\n                    msTreeService.select(elemLeaf);\n                    e.stopPropagation();\n                    //elemLeaf.toggleClass('selected');\n                })\n\n                scope.nodeClicked = function(node) {\n\n                    scope.expanded=!scope.expanded;\n                    if (node.type==options.fileType) {\n                        console.log('Node clicked', node, options,scope[options.onSelect]);\n                        if (angular.isDefined(scope[options.onSelect])) {\n                            scope[options.onSelect](node);\n                        }\n\n                    }\n\n                    function toggleChildren(child) {\n                        angular.forEach(child.nodes, function(child) {\n                            child.hide=!child.hide;\n                            toggleChildren(child);\n                        });\n\n\n                    }\n                    toggleChildren(node);\n                };\n\n                scope.isFolder = function(node) {\n                    return node.type == options.folderType;\n                }\n                scope.isFile = function(node) {\n                    return node.type == options.fileType;\n                }\n                scope.isExpanded = function(node) {\n                    return scope.expanded;\n                }\n                scope.hasChildren = function(node) {\n                    return (node.nodes && node.nodes.length > 0);\n                }\n                scope.isClassExpanded = function() {\n                    return angular.isDefined(attrs.classExpanded);\n                }\n                scope.isClassCollapsed = function() {\n                    return angular.isDefined(options.classCollapsed);\n                }\n                scope.isClassFile = function() {\n                    return angular.isDefined(options.classFile);\n                }\n                scope.getClassExpanded = function() {\n\n                    return attrs.classExpanded;\n                }\n                scope.getClassCollapsed = function() {\n                    return attrs.classCollapsed;\n                }\n                scope.getClassFile = function() {\n                    return attrs.classFile;\n                }\n\n\n                scope.isLeaf = function(_data) {\n                    if (_data.nodes && _data.nodes.length == 0) {\n                        return true;\n                    }\n                    return false;\n                };\n\n                if (scope.node && scope.node.nodes &&  scope.node.nodes.length > 0) {\n                    var childNodeAttr=\"\";\n                    if (angular.isDefined(options.onSelect)) {\n                        childNodeAttr+=' data-on-select=\"' + options.onSelect + '\"';\n                    }\n\n                    if (angular.isDefined(attrs.folderType)) {\n                        childNodeAttr+=' data-folder-type=\"' + attrs.folderType + '\"';\n                    }\n                    if (angular.isDefined(attrs.fileType)) {\n                        childNodeAttr+=' data-file-type=\"' + attrs.fileType + '\"';\n                    }\n                    if (angular.isDefined(attrs.classExpanded)) {\n\n                        childNodeAttr+=' data-class-expanded=\"' + attrs.classExpanded + '\"';\n                    }\n                    if (angular.isDefined(attrs.classCollapsed)) {\n\n                        childNodeAttr+=' data-class-collapsed=\"' + attrs.classCollapsed + '\"';\n                    }\n                    if (angular.isDefined(attrs.classFile)) {\n\n                        childNodeAttr+=' data-class-file=\"' + attrs.classFile + '\"';\n                    }\n                    if (angular.isDefined(attrs.classParent)) {\n\n                        childNodeAttr+=' data-class-parent=\"' + attrs.classParent + '\"';\n                    }\n                    if (angular.isDefined(attrs.classLeaf)) {\n\n                        childNodeAttr+=' data-class-leaf=\"' + attrs.classLeaf + '\"';\n                    }\n\n                    var childNode = $compile('<ul><ms-tree ng-model=\"node.nodes\"' + childNodeAttr+'></ms-tree></ul>')(scope)\n\n                    elm.append(childNode);\n                }\n            }\n        };\n    });","angular.module('ms.NgUi.tree2',[])\n    .directive('tree2', function() {\n    return {\n        replace: true,\n        transclude: true,\n        restrict: 'A',\n        scope: {\n            tree: '=ngModel',\n            folderType:\"=\",\n            fileType:\"=\",\n            hovering: \"=\",//branch, leaf\n            select : \"&onSelect\",\n            classCollapse : \"=\",\n            classExpand : \"=\",\n            classFile : \"=\",\n            classDirectory : \"=\"\n        },\n        link: function(scope, elem, attrs, controller) {\n            //get child node\n\n            var childElem='<li class=\"ng-tree-node\"><div>{{item}}</div><ul></ul></li>';\n            console.log('Tree2',attrs, elem,scope,childElem);\n\n            angular.forEach(scope.tree, function(item) {\n                elem.append('');\n                console.log('item',item);\n            });\n        }\n    };\n});","var TreeGridController = (function() {\n    var GridController = {};\n})();\nangular.module('ms.NgUi.treeGrid',[])\n    .directive('treeGrid', function() {\n\n        return {\n            //replace: true,\n            restrict: 'A',\n            scope: {\n                tree: '=ngModel'\n            },\n            controller: [\"$scope\",\"$compile\", \"$parse\", \"$timeout\", \"$templateCache\", function($scope, $compile, $parse, $timeout, $templateCache) {\n                this.$compile = $compile;\n                this.$parse = $parse;\n                this.$timeout = $timeout;\n                this.addRow = function() {\n                    console.log();\n                }\n                console.log(\"Ctrl\",this, $scope);\n            }],\n            template : function(templateElement, tAttrs) {\n                console.log('template', templateElement, tAttrs);\n\n                //Add the default class\n                var theadEl=templateElement.find(\"thead\");\n                if (theadEl)\n                {\n                    angular.forEach(theadEl.children(), function(childEl) {\n\n                        }\n                    );\n                }\n                angular.forEach(templateElement.children(), function (childElement) {\n                    childElement = angular.element(childElement);\n                    //childElement.attr(\"ng-non-bindable\", \"\");\n                });\n\n            },\n            compile: function (templateElement, tAttrs) {\n                return {\n                    pre: function (isolatedScope, instanceElement, tAttrs, controller) {\n                        //controller.discoverTemplates(instanceElement);\n                    },\n                    post: function (isolatedScope, instanceElement, tAttrs, controller, transcludeFn) {\n                        console.log('link', controller, isolatedScope);\n                        //instanceElement.append(\"<tr><td>Ala</td></tr>\");\n                        //var gridScope = controller.setupScope(isolatedScope, instanceElement, tAttrs);\n                        //controller.configureTableStructure(gridScope, instanceElement);\n                        //controller.setupDisplayItemsArray(gridScope);\n                    }\n                };\n            }\n        };\n    }).directive('treeGridTh', function() {\n        return {\n            restrict: 'A',\n            require: \"^treeGrid\",\n            link: function (scope, elm, attrs, controller) {\n                console.log(\"Ctrl 2\",controller);\n\n            }\n        }\n    });"],"sourceRoot":"/source/"}